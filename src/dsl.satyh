@require: option
@import: ast
@import: line

open GreenDeriveAst
open GreenDeriveLine

type label-position =
| Left
| Right

module GreenDeriveDSL : sig

    val derive: math -> derivation-ast
    val by: label-position?-> inline-text -> derivation-ast -> derivation-ast 
    val from: derivation-ast list -> derivation-ast -> derivation-ast
    val withLine: derivation-line -> derivation-ast -> derivation-ast

    val assume: math -> derivation-ast

end = struct
    
    let derive conclusion = make-ast None None conclusion [] standard-line

    let by ?:position label-text ast =
        match position |> Option.from Left with
        | Left -> (
            match ast with
            | Ast(_, rlabel-text, conclusion, assumptions, line) ->
                Ast(Some(label-text), rlabel-text, conclusion, assumptions, line))
        | Right -> (
            match ast with
            | Ast(llabel-text, _, conclusion, assumptions, line) ->
                Ast(llabel-text, Some(label-text), conclusion, assumptions, line))

    let from assumptions ast =
        match ast with
        | Ast(llabel-text, rlabel-text, conclusion, _, line) ->
            Ast(llabel-text, rlabel-text, conclusion, assumptions, line)

    let withLine line ast =
        match ast with
        | Ast(llabel-text, rlabel-text, conclusion, assumptions, _) ->
            Ast(llabel-text, rlabel-text, conclusion, assumptions, line)

    let assume assumption = make-ast None None assumption [] no-line

end